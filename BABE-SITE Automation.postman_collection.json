{
	"info": {
		"_postman_id": "abef1adc-536f-4860-9545-c8bf2e5d2037",
		"name": "BABE-SITE Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29041441"
	},
	"item": [
		{
			"name": "List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    \r",
							"        pm.response.to.have.status(200);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Expected Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"    \r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"///////////////////// Get the expected id from the CSV file\r",
							"var expectedId = pm.iterationData.get('id');\r",
							"var expectedaddress = pm.iterationData.get('address');\r",
							"var expectedsite_id = pm.iterationData.get('site_id');\r",
							"var expectedprotocol_id = pm.iterationData.get('protocol_id');\r",
							"var expectedcountry = pm.iterationData.get('country');\r",
							"\r",
							"\r",
							"// Parse the JSON response\r",
							"var jsonArray = pm.response.json();\r",
							"\r",
							"// Find the record with the expected id\r",
							"var recordWithExpectedId = jsonArray.find(function(record) {\r",
							"    return record.id === expectedId;\r",
							"});\r",
							"\r",
							"// Validate fields for the record with the expected id\r",
							"pm.test(\"Validated id field for id = \" + expectedId, function () {\r",
							"    if (recordWithExpectedId) {\r",
							"        // Validate id\r",
							"        pm.expect(recordWithExpectedId.id).to.equal(expectedId);\r",
							"         } else {\r",
							"        pm.expect.fail(\"Record with id \" + expectedId + \" not found in JSON response\");\r",
							"    }\r",
							"});\r",
							"\r",
							"// Validate address field for the record with the expected id\r",
							"pm.test(\"Validated address field for id = \" + expectedId, function () {\r",
							"    if (recordWithExpectedId) {\r",
							"         \r",
							"        // Validate address\r",
							"        pm.expect(recordWithExpectedId.address, \"Validated address for id = \" + expectedId).to.equal(expectedaddress);\r",
							"         } else {\r",
							"        pm.expect.fail(\"Record with id \" + expectedId + \" not found in JSON response\");\r",
							"    }\r",
							"});\r",
							"\r",
							"// Validate site_id field for the record with the expected id\r",
							"pm.test(\"Validated site_id field for id = \" + expectedId, function () {\r",
							"    if (recordWithExpectedId) {\r",
							"         \r",
							"        // Validate address\r",
							"        pm.expect(recordWithExpectedId.site_id, \"Validated address for id = \" + expectedId).to.equal(expectedsite_id);\r",
							"         } else {\r",
							"        pm.expect.fail(\"Record with id \" + expectedId + \" not found in JSON response\");\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// Validate protocol_id field for the record with the expected id\r",
							"pm.test(\"Validated protocol_id field for id = \" + expectedId, function () {\r",
							"    if (recordWithExpectedId) {\r",
							"         \r",
							"        // Validate protocol_id\r",
							"        pm.expect(recordWithExpectedId.protocol_id, \"Validated protocol_id for id = \" + expectedId).to.equal(expectedprotocol_id);\r",
							"         } else {\r",
							"        pm.expect.fail(\"Record with id \" + expectedId + \" not found in JSON response\");\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// Validate country field for the record with the expected id\r",
							"pm.test(\"Validated country field for id = \" + expectedId, function () {\r",
							"    if (recordWithExpectedId) {\r",
							"         \r",
							"        // Validate country\r",
							"        pm.expect(recordWithExpectedId.country, \"Validated country for id = \" + expectedId).to.equal(expectedcountry);\r",
							"         } else {\r",
							"        pm.expect.fail(\"Record with id \" + expectedId + \" not found in JSON response\");\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJlMm43cDFXWmdvU3c1YytqRW5IdkcxaGtFVjJzRUJ1bFwvSVZ1WjVNVllyZz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJmNjI3ZTkzYS1hYTBmLTQwN2EtODIzOC0zNDdhN2YzMTU1MDUiLCJjb2duaXRvOmdyb3VwcyI6WyJ1cy13ZXN0LTJfSW9DdlFNNWNVX29rdGFTU08iLCJBUFBfQkFCRV9NRU1CRVJTIiwiQWxsIEdpbGVhZCBJbnRlcm5hbCBVc2VycyIsbnVsbF0sImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0lvQ3ZRTTVjVSIsInZlcnNpb24iOjIsImNsaWVudF9pZCI6IjR2MXNvbHJ0bWJpajM5N2xkZmNkNHBraGNyIiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJwaG9uZSBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsImF1dGhfdGltZSI6MTY5MTU4MTQzNCwiZXhwIjoxNjkxNTg1MDM0LCJpYXQiOjE2OTE1ODE0MzUsImp0aSI6ImNkZTc2ZmQxLWFmMTgtNGJhZi04YTJhLTE2ZDk5YjQwYTY5NSIsInVzZXJuYW1lIjoib2t0YXNzb19wcmFzYW5uYS5wcml5YTFAZ2lsZWFkLmNvbSJ9.KUuzO6azyJgvKQgUMCKDTOumSFJ6pDbd7nrtsUVpCu81q7QJ8KBuqxKZXBZLYy12pHbCH0aenfSuoeazSD1Io8pTjXIsishjH7fcmExcmkXi4p6xgT4d4dK5JQYzpqcyHiBhqz5ORNpHUo9z0KlVZ1RQYdjcp57lLJj7onaR-2sNfRHPZpoLtQwtEr8SKsdzQu86LrqyT09YPBdEd_VoEImkqvlpJlcDNXE8jToVL8tv8Btx8IJecseh4goWxASlYMaVXd8RTY3_l6BWsbRpElxwIzNLw-SWwqlmXiCfVjXafzMNWRqaHSaC_OG6xT2LTNTgixW8gFylyNliIRLElw",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BABEbaseURL}}/site",
					"host": [
						"{{BABEbaseURL}}"
					],
					"path": [
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    \r",
							"        pm.response.to.have.status(200);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Expected Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"    \r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJlMm43cDFXWmdvU3c1YytqRW5IdkcxaGtFVjJzRUJ1bFwvSVZ1WjVNVllyZz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJmNjI3ZTkzYS1hYTBmLTQwN2EtODIzOC0zNDdhN2YzMTU1MDUiLCJjb2duaXRvOmdyb3VwcyI6WyJ1cy13ZXN0LTJfSW9DdlFNNWNVX29rdGFTU08iLCJBUFBfQkFCRV9NRU1CRVJTIiwiQWxsIEdpbGVhZCBJbnRlcm5hbCBVc2VycyIsbnVsbF0sImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0lvQ3ZRTTVjVSIsInZlcnNpb24iOjIsImNsaWVudF9pZCI6IjR2MXNvbHJ0bWJpajM5N2xkZmNkNHBraGNyIiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJwaG9uZSBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsImF1dGhfdGltZSI6MTY5MTU4MTQzNCwiZXhwIjoxNjkxNTg1MDM0LCJpYXQiOjE2OTE1ODE0MzUsImp0aSI6ImNkZTc2ZmQxLWFmMTgtNGJhZi04YTJhLTE2ZDk5YjQwYTY5NSIsInVzZXJuYW1lIjoib2t0YXNzb19wcmFzYW5uYS5wcml5YTFAZ2lsZWFkLmNvbSJ9.KUuzO6azyJgvKQgUMCKDTOumSFJ6pDbd7nrtsUVpCu81q7QJ8KBuqxKZXBZLYy12pHbCH0aenfSuoeazSD1Io8pTjXIsishjH7fcmExcmkXi4p6xgT4d4dK5JQYzpqcyHiBhqz5ORNpHUo9z0KlVZ1RQYdjcp57lLJj7onaR-2sNfRHPZpoLtQwtEr8SKsdzQu86LrqyT09YPBdEd_VoEImkqvlpJlcDNXE8jToVL8tv8Btx8IJecseh4goWxASlYMaVXd8RTY3_l6BWsbRpElxwIzNLw-SWwqlmXiCfVjXafzMNWRqaHSaC_OG6xT2LTNTgixW8gFylyNliIRLElw",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \"status\": \"Test Confirmed On-site\",\r\n  \"comments\": \"test comment\",\r\n  \"secondary_contact_name\": \"test333@example.com\",\r\n  \"primary_contact_name\": \"test222@example.com\",\r\n  \"certificate_filed\": \"no\",\r\n  \"site_contact_name\": \"Vincent vinod test\",\r\n  \"address\": \"One Squibb Drive,New Brunswick,NJ,US,08903-0191\"\r\n }"
				},
				"url": {
					"raw": "{{BABEbaseURL}}/site/{{updateid}}",
					"host": [
						"{{BABEbaseURL}}"
					],
					"path": [
						"site",
						"{{updateid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    \r",
							"        pm.response.to.have.status(200);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Verified response and Expected Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"    \r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJlMm43cDFXWmdvU3c1YytqRW5IdkcxaGtFVjJzRUJ1bFwvSVZ1WjVNVllyZz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJmNjI3ZTkzYS1hYTBmLTQwN2EtODIzOC0zNDdhN2YzMTU1MDUiLCJjb2duaXRvOmdyb3VwcyI6WyJ1cy13ZXN0LTJfSW9DdlFNNWNVX29rdGFTU08iLCJBUFBfQkFCRV9NRU1CRVJTIiwiQWxsIEdpbGVhZCBJbnRlcm5hbCBVc2VycyIsbnVsbF0sImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0lvQ3ZRTTVjVSIsInZlcnNpb24iOjIsImNsaWVudF9pZCI6IjR2MXNvbHJ0bWJpajM5N2xkZmNkNHBraGNyIiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJwaG9uZSBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsImF1dGhfdGltZSI6MTY5MTU4MTQzNCwiZXhwIjoxNjkxNTg1MDM0LCJpYXQiOjE2OTE1ODE0MzUsImp0aSI6ImNkZTc2ZmQxLWFmMTgtNGJhZi04YTJhLTE2ZDk5YjQwYTY5NSIsInVzZXJuYW1lIjoib2t0YXNzb19wcmFzYW5uYS5wcml5YTFAZ2lsZWFkLmNvbSJ9.KUuzO6azyJgvKQgUMCKDTOumSFJ6pDbd7nrtsUVpCu81q7QJ8KBuqxKZXBZLYy12pHbCH0aenfSuoeazSD1Io8pTjXIsishjH7fcmExcmkXi4p6xgT4d4dK5JQYzpqcyHiBhqz5ORNpHUo9z0KlVZ1RQYdjcp57lLJj7onaR-2sNfRHPZpoLtQwtEr8SKsdzQu86LrqyT09YPBdEd_VoEImkqvlpJlcDNXE8jToVL8tv8Btx8IJecseh4goWxASlYMaVXd8RTY3_l6BWsbRpElxwIzNLw-SWwqlmXiCfVjXafzMNWRqaHSaC_OG6xT2LTNTgixW8gFylyNliIRLElw",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BABEbaseURL}}/site/{{id}}",
					"host": [
						"{{BABEbaseURL}}"
					],
					"path": [
						"site",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}